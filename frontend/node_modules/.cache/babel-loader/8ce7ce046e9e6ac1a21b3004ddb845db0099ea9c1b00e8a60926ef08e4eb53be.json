{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingId, setRecordingId] = useState(null);\n  const [recordings, setRecordings] = useState([]);\n  const [error, setError] = useState(null);\n  const [deviceStatus, setDeviceStatus] = useState('unchecked');\n  const [isTestMode, setIsTestMode] = useState(false);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  const mediaRecorder = useRef(null);\n  const audioChunks = useRef([]);\n  const recordingTimer = useRef(null);\n\n  // Update recording duration\n  useEffect(() => {\n    if (isRecording) {\n      recordingTimer.current = setInterval(() => {\n        setRecordingDuration(prev => prev + 1);\n      }, 1000);\n    } else {\n      clearInterval(recordingTimer.current);\n      setRecordingDuration(0);\n    }\n    return () => clearInterval(recordingTimer.current);\n  }, [isRecording]);\n  useEffect(() => {\n    // Load existing recordings\n    fetchRecordings();\n    // Check device status\n    checkAudioDevice();\n  }, []);\n  const fetchRecordings = async () => {\n    try {\n      const response = await fetch('http://localhost:55285/recordings');\n      const data = await response.json();\n      setRecordings(data.recordings);\n    } catch (error) {\n      console.error('Error fetching recordings:', error);\n      setError('Failed to load recordings');\n    }\n  };\n  const checkAudioDevice = async () => {\n    try {\n      // Check if MediaRecorder is supported\n      if (!window.MediaRecorder) {\n        setDeviceStatus('unavailable');\n        setError('Your browser does not support audio recording. Please use a modern browser.');\n        return false;\n      }\n\n      // Check if getUserMedia is supported\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        setDeviceStatus('unavailable');\n        setError('Audio recording is not supported in your browser.');\n        return false;\n      }\n\n      // List available devices first\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const hasAudioDevice = devices.some(device => device.kind === 'audioinput');\n      if (!hasAudioDevice) {\n        setDeviceStatus('unavailable');\n        setError('No microphone found. Please connect a microphone and try again.');\n        return false;\n      }\n\n      // Request permission and test device\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n\n      // Test if we can actually record\n      const testRecorder = new MediaRecorder(stream);\n\n      // Stop all tracks\n      stream.getTracks().forEach(track => track.stop());\n      setDeviceStatus('available');\n      setError(null);\n      return true;\n    } catch (err) {\n      console.error('Device check error:', err);\n\n      // Handle specific error cases\n      if (err.name === 'NotAllowedError' || err.name === 'PermissionDeniedError') {\n        setError('Microphone access denied. Please allow microphone access in your browser settings.');\n      } else if (err.name === 'NotFoundError') {\n        setError('No microphone found. Please check your microphone connection.');\n      } else if (err.name === 'NotReadableError' || err.name === 'TrackStartError') {\n        setError('Could not access your microphone. Please check if another application is using it.');\n      } else {\n        setError('Could not access audio device. Please check your microphone and browser settings.');\n      }\n      setDeviceStatus('unavailable');\n      return false;\n    }\n  };\n  const startRecording = async () => {\n    try {\n      setError(null);\n      audioChunks.current = [];\n      if (isTestMode) {\n        setIsRecording(true);\n        return;\n      }\n      if (deviceStatus !== 'available') {\n        const deviceAvailable = await checkAudioDevice();\n        if (!deviceAvailable) {\n          throw new Error('Audio device not available');\n        }\n      }\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: {\n            ideal: 16000\n          },\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n      const mimeType = MediaRecorder.isTypeSupported('audio/webm') ? 'audio/webm' : 'audio/wav';\n      mediaRecorder.current = new MediaRecorder(stream, {\n        mimeType: mimeType,\n        audioBitsPerSecond: 32000\n      });\n      mediaRecorder.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          audioChunks.current.push(event.data);\n        }\n      };\n      mediaRecorder.current.start(1000); // Capture every second\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      setError(error.message || 'Error starting recording');\n      setIsRecording(false);\n    }\n  };\n  const stopRecording = async () => {\n    try {\n      if (isTestMode) {\n        setIsRecording(false);\n        // Create test recording with proper FormData\n        const formData = new FormData();\n        const testBlob = new Blob(['test audio data'], {\n          type: 'audio/webm'\n        });\n        formData.append('audio', testBlob, 'test_recording');\n        const response = await fetch('http://localhost:55285/recordings', {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) {\n          throw new Error('Failed to process test recording');\n        }\n        const result = await response.json();\n        setRecordingId(result.recording_id);\n        await fetchRecordings(); // Refresh recordings list\n        return;\n      }\n      if (mediaRecorder.current && mediaRecorder.current.state === 'recording') {\n        mediaRecorder.current.stop();\n        mediaRecorder.current.stream.getTracks().forEach(track => track.stop());\n\n        // Create a single blob from all chunks\n        const audioBlob = new Blob(audioChunks.current, {\n          type: mediaRecorder.current.mimeType\n        });\n\n        // Upload the complete recording\n        const formData = new FormData();\n        formData.append('audio', audioBlob);\n        const response = await fetch('http://localhost:55285/recordings', {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) {\n          throw new Error('Failed to upload recording');\n        }\n        const result = await response.json();\n        setRecordingId(result.recording_id);\n\n        // Clear recording state\n        setIsRecording(false);\n        audioChunks.current = [];\n\n        // Refresh recordings list\n        fetchRecordings();\n      }\n    } catch (error) {\n      console.error('Error stopping recording:', error);\n      setError(error.message || 'Error stopping recording');\n      setIsRecording(false);\n    }\n  };\n  const toggleTestMode = () => {\n    setIsTestMode(!isTestMode);\n    setDeviceStatus(isTestMode ? 'unchecked' : 'available');\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 p-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-4xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"text-center mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold text-gray-800\",\n          children: \"Hindi Audio Transcription Tool\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mt-2\",\n          children: \"Record and transcribe Hindi audio in real-time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleTestMode,\n            className: \"text-sm px-4 py-2 rounded bg-gray-200 hover:bg-gray-300 transition-colors\",\n            children: isTestMode ? 'Exit Test Mode' : 'Enter Test Mode'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), isTestMode && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500 mt-2\",\n            children: \"Test mode enabled. Recording simulation active.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-3 h-3 rounded-full mr-2 ${isTestMode ? 'bg-yellow-500' : deviceStatus === 'available' ? 'bg-green-500' : deviceStatus === 'unavailable' ? 'bg-red-500' : 'bg-yellow-500'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: isTestMode ? 'Test Mode Active' : deviceStatus === 'available' ? 'Microphone Ready' : deviceStatus === 'unavailable' ? 'No Microphone' : 'Checking Device...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), error && !isTestMode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block sm:inline\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center mb-6\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isRecording ? stopRecording : startRecording,\n            disabled: !isTestMode && deviceStatus !== 'available',\n            className: `px-6 py-3 rounded-full font-semibold text-white ${!isTestMode && deviceStatus !== 'available' ? 'bg-gray-400 cursor-not-allowed' : isRecording ? 'bg-red-500 hover:bg-red-600' : 'bg-blue-500 hover:bg-blue-600'}`,\n            children: isRecording ? 'Stop Recording' : 'Start Recording'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-sm text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"recording-indicator inline-block w-2 h-2 bg-red-500 rounded-full mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this), isTestMode ? 'Test recording in progress...' : 'Recording in progress...']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Recordings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: [recordings.map(recording => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border-b pb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-start\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-500\",\n                  children: new Date(recording.timestamp).toLocaleString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-gray-700\",\n                  children: [\"Duration: \", Math.round(recording.duration), \"s\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `px-2 py-1 rounded text-xs ${recording.status === 'completed' ? 'bg-green-100 text-green-800' : recording.status === 'failed' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'}`,\n                children: recording.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-4 transcript-text\",\n              children: [recording.status === 'completed' && recording.transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"text-sm font-semibold text-gray-500 mb-2\",\n                  children: \"Transcription:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-gray-800 whitespace-pre-wrap font-hindi text-lg\",\n                  children: recording.transcript\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 21\n              }, this), recording.status === 'processing' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center justify-center py-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mr-3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-blue-600\",\n                  children: \"Processing transcription...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 21\n              }, this), recording.status === 'failed' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-red-50 border-l-4 border-red-500 p-4\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex items-center\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex-shrink-0\",\n                    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                      className: \"h-5 w-5 text-red-400\",\n                      viewBox: \"0 0 20 20\",\n                      fill: \"currentColor\",\n                      children: /*#__PURE__*/_jsxDEV(\"path\", {\n                        fillRule: \"evenodd\",\n                        d: \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\",\n                        clipRule: \"evenodd\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 349,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 348,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 347,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"ml-3\",\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"text-sm text-red-700\",\n                      children: recording.error || 'Failed to process recording'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 353,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 352,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 17\n            }, this)]\n          }, recording.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this)), recordings.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-500 text-center\",\n            children: \"No recordings yet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ftCyvgxssMJ4btYI/sqvUsIyeA8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","recordingId","setRecordingId","recordings","setRecordings","error","setError","deviceStatus","setDeviceStatus","isTestMode","setIsTestMode","recordingDuration","setRecordingDuration","isUploading","setIsUploading","mediaRecorder","audioChunks","recordingTimer","current","setInterval","prev","clearInterval","fetchRecordings","checkAudioDevice","response","fetch","data","json","console","window","MediaRecorder","navigator","mediaDevices","getUserMedia","devices","enumerateDevices","hasAudioDevice","some","device","kind","stream","audio","echoCancellation","noiseSuppression","autoGainControl","testRecorder","getTracks","forEach","track","stop","err","name","startRecording","deviceAvailable","Error","channelCount","sampleRate","ideal","mimeType","isTypeSupported","audioBitsPerSecond","ondataavailable","event","size","push","start","message","stopRecording","formData","FormData","testBlob","Blob","type","append","method","body","ok","result","recording_id","state","audioBlob","toggleTestMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","recording","Date","timestamp","toLocaleString","Math","round","duration","status","transcript","viewBox","fill","fillRule","d","clipRule","id","length","_c","$RefreshReg$"],"sources":["/app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingId, setRecordingId] = useState(null);\n  const [recordings, setRecordings] = useState([]);\n  const [error, setError] = useState(null);\n  const [deviceStatus, setDeviceStatus] = useState('unchecked');\n  const [isTestMode, setIsTestMode] = useState(false);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  const mediaRecorder = useRef(null);\n  const audioChunks = useRef([]);\n  const recordingTimer = useRef(null);\n\n  // Update recording duration\n  useEffect(() => {\n    if (isRecording) {\n      recordingTimer.current = setInterval(() => {\n        setRecordingDuration(prev => prev + 1);\n      }, 1000);\n    } else {\n      clearInterval(recordingTimer.current);\n      setRecordingDuration(0);\n    }\n    return () => clearInterval(recordingTimer.current);\n  }, [isRecording]);\n\n  useEffect(() => {\n    // Load existing recordings\n    fetchRecordings();\n    // Check device status\n    checkAudioDevice();\n  }, []);\n\n  const fetchRecordings = async () => {\n    try {\n      const response = await fetch('http://localhost:55285/recordings');\n      const data = await response.json();\n      setRecordings(data.recordings);\n    } catch (error) {\n      console.error('Error fetching recordings:', error);\n      setError('Failed to load recordings');\n    }\n  };\n\n  const checkAudioDevice = async () => {\n    try {\n      // Check if MediaRecorder is supported\n      if (!window.MediaRecorder) {\n        setDeviceStatus('unavailable');\n        setError('Your browser does not support audio recording. Please use a modern browser.');\n        return false;\n      }\n\n      // Check if getUserMedia is supported\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        setDeviceStatus('unavailable');\n        setError('Audio recording is not supported in your browser.');\n        return false;\n      }\n\n      // List available devices first\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const hasAudioDevice = devices.some(device => device.kind === 'audioinput');\n\n      if (!hasAudioDevice) {\n        setDeviceStatus('unavailable');\n        setError('No microphone found. Please connect a microphone and try again.');\n        return false;\n      }\n\n      // Request permission and test device\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n\n      // Test if we can actually record\n      const testRecorder = new MediaRecorder(stream);\n      \n      // Stop all tracks\n      stream.getTracks().forEach(track => track.stop());\n      \n      setDeviceStatus('available');\n      setError(null);\n      return true;\n\n    } catch (err) {\n      console.error('Device check error:', err);\n      \n      // Handle specific error cases\n      if (err.name === 'NotAllowedError' || err.name === 'PermissionDeniedError') {\n        setError('Microphone access denied. Please allow microphone access in your browser settings.');\n      } else if (err.name === 'NotFoundError') {\n        setError('No microphone found. Please check your microphone connection.');\n      } else if (err.name === 'NotReadableError' || err.name === 'TrackStartError') {\n        setError('Could not access your microphone. Please check if another application is using it.');\n      } else {\n        setError('Could not access audio device. Please check your microphone and browser settings.');\n      }\n      \n      setDeviceStatus('unavailable');\n      return false;\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      setError(null);\n      audioChunks.current = [];\n      \n      if (isTestMode) {\n        setIsRecording(true);\n        return;\n      }\n      \n      if (deviceStatus !== 'available') {\n        const deviceAvailable = await checkAudioDevice();\n        if (!deviceAvailable) {\n          throw new Error('Audio device not available');\n        }\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: { ideal: 16000 },\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n      \n      const mimeType = MediaRecorder.isTypeSupported('audio/webm')\n        ? 'audio/webm'\n        : 'audio/wav';\n      \n      mediaRecorder.current = new MediaRecorder(stream, {\n        mimeType: mimeType,\n        audioBitsPerSecond: 32000\n      });\n      \n      mediaRecorder.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunks.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.current.start(1000); // Capture every second\n      setIsRecording(true);\n\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      setError(error.message || 'Error starting recording');\n      setIsRecording(false);\n    }\n  };\n\n  const stopRecording = async () => {\n    try {\n      if (isTestMode) {\n        setIsRecording(false);\n        // Create test recording with proper FormData\n        const formData = new FormData();\n        const testBlob = new Blob(['test audio data'], { type: 'audio/webm' });\n        formData.append('audio', testBlob, 'test_recording');\n        \n        const response = await fetch('http://localhost:55285/recordings', {\n          method: 'POST',\n          body: formData\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to process test recording');\n        }\n        \n        const result = await response.json();\n        setRecordingId(result.recording_id);\n        await fetchRecordings();  // Refresh recordings list\n        return;\n      }\n\n      if (mediaRecorder.current && mediaRecorder.current.state === 'recording') {\n        mediaRecorder.current.stop();\n        mediaRecorder.current.stream.getTracks().forEach(track => track.stop());\n        \n        // Create a single blob from all chunks\n        const audioBlob = new Blob(audioChunks.current, { \n          type: mediaRecorder.current.mimeType \n        });\n        \n        // Upload the complete recording\n        const formData = new FormData();\n        formData.append('audio', audioBlob);\n        \n        const response = await fetch('http://localhost:55285/recordings', {\n          method: 'POST',\n          body: formData\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to upload recording');\n        }\n        \n        const result = await response.json();\n        setRecordingId(result.recording_id);\n        \n        // Clear recording state\n        setIsRecording(false);\n        audioChunks.current = [];\n        \n        // Refresh recordings list\n        fetchRecordings();\n      }\n    } catch (error) {\n      console.error('Error stopping recording:', error);\n      setError(error.message || 'Error stopping recording');\n      setIsRecording(false);\n    }\n  };\n\n  const toggleTestMode = () => {\n    setIsTestMode(!isTestMode);\n    setDeviceStatus(isTestMode ? 'unchecked' : 'available');\n    setError(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <header className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800\">Hindi Audio Transcription Tool</h1>\n          <p className=\"text-gray-600 mt-2\">Record and transcribe Hindi audio in real-time</p>\n          \n          {/* Test Mode Toggle */}\n          <div className=\"mt-4\">\n            <button\n              onClick={toggleTestMode}\n              className=\"text-sm px-4 py-2 rounded bg-gray-200 hover:bg-gray-300 transition-colors\"\n            >\n              {isTestMode ? 'Exit Test Mode' : 'Enter Test Mode'}\n            </button>\n            {isTestMode && (\n              <p className=\"text-xs text-gray-500 mt-2\">\n                Test mode enabled. Recording simulation active.\n              </p>\n            )}\n          </div>\n        </header>\n\n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n          {/* Device Status Indicator */}\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className={`w-3 h-3 rounded-full mr-2 ${\n              isTestMode ? 'bg-yellow-500' :\n              deviceStatus === 'available' ? 'bg-green-500' :\n              deviceStatus === 'unavailable' ? 'bg-red-500' :\n              'bg-yellow-500'\n            }`}></div>\n            <span className=\"text-sm text-gray-600\">\n              {isTestMode ? 'Test Mode Active' :\n               deviceStatus === 'available' ? 'Microphone Ready' :\n               deviceStatus === 'unavailable' ? 'No Microphone' :\n               'Checking Device...'}\n            </span>\n          </div>\n\n          {/* Error Message */}\n          {error && !isTestMode && (\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\n              <span className=\"block sm:inline\">{error}</span>\n            </div>\n          )}\n\n          {/* Recording Controls */}\n          <div className=\"flex justify-center mb-6\">\n            <button\n              onClick={isRecording ? stopRecording : startRecording}\n              disabled={!isTestMode && deviceStatus !== 'available'}\n              className={`px-6 py-3 rounded-full font-semibold text-white ${\n                !isTestMode && deviceStatus !== 'available'\n                  ? 'bg-gray-400 cursor-not-allowed' \n                : isRecording \n                  ? 'bg-red-500 hover:bg-red-600' \n                  : 'bg-blue-500 hover:bg-blue-600'\n              }`}\n            >\n              {isRecording ? 'Stop Recording' : 'Start Recording'}\n            </button>\n          </div>\n\n          {/* Recording Status */}\n          {isRecording && (\n            <div className=\"text-center text-sm text-gray-600\">\n              <div className=\"recording-indicator inline-block w-2 h-2 bg-red-500 rounded-full mr-2\"></div>\n              {isTestMode ? 'Test recording in progress...' : 'Recording in progress...'}\n            </div>\n          )}\n        </div>\n\n        {/* Recordings List */}\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Recordings</h2>\n          <div className=\"space-y-4\">\n            {recordings.map((recording) => (\n              <div key={recording.id} className=\"border-b pb-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"text-sm text-gray-500\">\n                      {new Date(recording.timestamp).toLocaleString()}\n                    </p>\n                    <p className=\"text-gray-700\">\n                      Duration: {Math.round(recording.duration)}s\n                    </p>\n                  </div>\n                  <span className={`px-2 py-1 rounded text-xs ${\n                    recording.status === 'completed' ? 'bg-green-100 text-green-800' :\n                    recording.status === 'failed' ? 'bg-red-100 text-red-800' :\n                    'bg-yellow-100 text-yellow-800'\n                  }`}>\n                    {recording.status}\n                  </span>\n                </div>\n                <div className=\"mt-4 transcript-text\">\n                  {recording.status === 'completed' && recording.transcript && (\n                    <div>\n                      <h3 className=\"text-sm font-semibold text-gray-500 mb-2\">Transcription:</h3>\n                      <p className=\"text-gray-800 whitespace-pre-wrap font-hindi text-lg\">\n                        {recording.transcript}\n                      </p>\n                    </div>\n                  )}\n                  {recording.status === 'processing' && (\n                    <div className=\"flex items-center justify-center py-4\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mr-3\"></div>\n                      <p className=\"text-blue-600\">Processing transcription...</p>\n                    </div>\n                  )}\n                  {recording.status === 'failed' && (\n                    <div className=\"bg-red-50 border-l-4 border-red-500 p-4\">\n                      <div className=\"flex items-center\">\n                        <div className=\"flex-shrink-0\">\n                          <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                          </svg>\n                        </div>\n                        <div className=\"ml-3\">\n                          <p className=\"text-sm text-red-700\">\n                            {recording.error || 'Failed to process recording'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n            {recordings.length === 0 && (\n              <p className=\"text-gray-500 text-center\">No recordings yet</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}