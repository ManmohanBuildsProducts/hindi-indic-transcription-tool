{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [transcriptions, setTranscriptions] = useState([]);\n  const [error, setError] = useState(null);\n  const [deviceStatus, setDeviceStatus] = useState('unchecked'); // 'unchecked' | 'available' | 'unavailable'\n  const mediaRecorder = useRef(null);\n  const chunkInterval = useRef(null);\n  useEffect(() => {\n    // Load existing transcriptions\n    fetchTranscriptions();\n\n    // Check for audio device availability\n    checkAudioDevice();\n  }, []);\n  const checkAudioDevice = async () => {\n    try {\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const hasAudioDevice = devices.some(device => device.kind === 'audioinput');\n      setDeviceStatus(hasAudioDevice ? 'available' : 'unavailable');\n      setError(hasAudioDevice ? null : 'No audio input device found. Please connect a microphone.');\n    } catch (err) {\n      setDeviceStatus('unavailable');\n      setError('Could not access audio devices. Please check permissions.');\n    }\n  };\n  const fetchTranscriptions = async () => {\n    try {\n      const response = await fetch('http://localhost:55285/transcriptions');\n      const data = await response.json();\n      setTranscriptions(data);\n    } catch (error) {\n      console.error('Error fetching transcriptions:', error);\n    }\n  };\n  const startRecording = async () => {\n    try {\n      setError(null);\n      if (deviceStatus !== 'available') {\n        await checkAudioDevice();\n        if (deviceStatus !== 'available') {\n          throw new Error('Audio device not available');\n        }\n      }\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n          sampleSize: 16,\n          volume: 1.0\n        }\n      });\n      mediaRecorder.current = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus',\n        audioBitsPerSecond: 16000\n      });\n      mediaRecorder.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, event.data]);\n        }\n      };\n      mediaRecorder.current.onerror = event => {\n        setError('Recording error: ' + event.error.message);\n        stopRecording();\n      };\n      mediaRecorder.current.start(1000); // Capture every second for smoother experience\n      setIsRecording(true);\n\n      // Create 8-minute chunks\n      chunkInterval.current = setInterval(() => {\n        if (mediaRecorder.current && mediaRecorder.current.state === 'recording') {\n          mediaRecorder.current.stop();\n          mediaRecorder.current.start(1000);\n        }\n      }, 8 * 60 * 1000); // 8 minutes in milliseconds\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      setError(error.message || 'Error accessing microphone');\n      setIsRecording(false);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorder.current) {\n      mediaRecorder.current.stop();\n      clearInterval(chunkInterval.current);\n      mediaRecorder.current.stream.getTracks().forEach(track => track.stop());\n    }\n    setIsRecording(false);\n  };\n  const uploadChunk = async chunk => {\n    try {\n      const formData = new FormData();\n      formData.append('audio', chunk, 'audio-chunk.webm');\n      const response = await fetch('http://localhost:55285/transcribe', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.text && result.text.trim()) {\n        setTranscriptions(prev => [{\n          ...result,\n          timestamp: new Date(result.timestamp).toISOString()\n        }, ...prev]);\n      }\n    } catch (error) {\n      console.error('Error uploading chunk:', error);\n      setError(`Error processing audio: ${error.message}`);\n    }\n  };\n\n  // Process audio chunks\n  useEffect(() => {\n    const processChunk = async () => {\n      if (audioChunks.length > 0) {\n        const lastChunk = audioChunks[audioChunks.length - 1];\n        if (lastChunk.size > 0) {\n          await uploadChunk(lastChunk);\n        }\n      }\n    };\n    processChunk();\n  }, [audioChunks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 p-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-4xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"text-center mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold text-gray-800\",\n          children: \"Hindi Audio Transcription Tool\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mt-2\",\n          children: \"Record and transcribe Hindi audio in real-time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-3 h-3 rounded-full mr-2 ${deviceStatus === 'available' ? 'bg-green-500' : deviceStatus === 'unavailable' ? 'bg-red-500' : 'bg-yellow-500'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: deviceStatus === 'available' ? 'Microphone Ready' : deviceStatus === 'unavailable' ? 'No Microphone' : 'Checking Device...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block sm:inline\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center mb-6\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isRecording ? stopRecording : startRecording,\n            disabled: deviceStatus !== 'available',\n            className: `px-6 py-3 rounded-full font-semibold text-white ${deviceStatus !== 'available' ? 'bg-gray-400 cursor-not-allowed' : isRecording ? 'bg-red-500 hover:bg-red-600' : 'bg-blue-500 hover:bg-blue-600'}`,\n            children: isRecording ? 'Stop Recording' : 'Start Recording'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-sm text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"recording-indicator inline-block w-2 h-2 bg-red-500 rounded-full mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), \"Recording in progress... Audio will be processed in 8-minute chunks\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Transcriptions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: transcriptions.map((trans, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border-b pb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-800\",\n              children: trans.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-500 mt-2\",\n              children: [new Date(trans.timestamp).toLocaleString(), \" - Duration: \", trans.duration, \"s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aFCIoH/SNjiF7BbcbFH4eYatvwU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","audioChunks","setAudioChunks","transcriptions","setTranscriptions","error","setError","deviceStatus","setDeviceStatus","mediaRecorder","chunkInterval","fetchTranscriptions","checkAudioDevice","devices","navigator","mediaDevices","enumerateDevices","hasAudioDevice","some","device","kind","err","response","fetch","data","json","console","startRecording","Error","stream","getUserMedia","audio","channelCount","sampleRate","sampleSize","volume","current","MediaRecorder","mimeType","audioBitsPerSecond","ondataavailable","event","size","chunks","onerror","message","stopRecording","start","setInterval","state","stop","clearInterval","getTracks","forEach","track","uploadChunk","chunk","formData","FormData","append","method","body","ok","status","result","text","trim","prev","timestamp","Date","toISOString","processChunk","length","lastChunk","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","trans","index","toLocaleString","duration","_c","$RefreshReg$"],"sources":["/app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [transcriptions, setTranscriptions] = useState([]);\n  const [error, setError] = useState(null);\n  const [deviceStatus, setDeviceStatus] = useState('unchecked'); // 'unchecked' | 'available' | 'unavailable'\n  const mediaRecorder = useRef(null);\n  const chunkInterval = useRef(null);\n\n  useEffect(() => {\n    // Load existing transcriptions\n    fetchTranscriptions();\n    \n    // Check for audio device availability\n    checkAudioDevice();\n  }, []);\n\n  const checkAudioDevice = async () => {\n    try {\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const hasAudioDevice = devices.some(device => device.kind === 'audioinput');\n      setDeviceStatus(hasAudioDevice ? 'available' : 'unavailable');\n      setError(hasAudioDevice ? null : 'No audio input device found. Please connect a microphone.');\n    } catch (err) {\n      setDeviceStatus('unavailable');\n      setError('Could not access audio devices. Please check permissions.');\n    }\n  };\n\n  const fetchTranscriptions = async () => {\n    try {\n      const response = await fetch('http://localhost:55285/transcriptions');\n      const data = await response.json();\n      setTranscriptions(data);\n    } catch (error) {\n      console.error('Error fetching transcriptions:', error);\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      setError(null);\n      \n      if (deviceStatus !== 'available') {\n        await checkAudioDevice();\n        if (deviceStatus !== 'available') {\n          throw new Error('Audio device not available');\n        }\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n          sampleSize: 16,\n          volume: 1.0\n        } \n      });\n\n      mediaRecorder.current = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus',\n        audioBitsPerSecond: 16000\n      });\n      \n      mediaRecorder.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, event.data]);\n        }\n      };\n\n      mediaRecorder.current.onerror = (event) => {\n        setError('Recording error: ' + event.error.message);\n        stopRecording();\n      };\n\n      mediaRecorder.current.start(1000); // Capture every second for smoother experience\n      setIsRecording(true);\n\n      // Create 8-minute chunks\n      chunkInterval.current = setInterval(() => {\n        if (mediaRecorder.current && mediaRecorder.current.state === 'recording') {\n          mediaRecorder.current.stop();\n          mediaRecorder.current.start(1000);\n        }\n      }, 8 * 60 * 1000); // 8 minutes in milliseconds\n\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      setError(error.message || 'Error accessing microphone');\n      setIsRecording(false);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorder.current) {\n      mediaRecorder.current.stop();\n      clearInterval(chunkInterval.current);\n      mediaRecorder.current.stream.getTracks().forEach(track => track.stop());\n    }\n    setIsRecording(false);\n  };\n\n  const uploadChunk = async (chunk) => {\n    try {\n      const formData = new FormData();\n      formData.append('audio', chunk, 'audio-chunk.webm');\n\n      const response = await fetch('http://localhost:55285/transcribe', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      \n      if (result.text && result.text.trim()) {\n        setTranscriptions(prev => [{\n          ...result,\n          timestamp: new Date(result.timestamp).toISOString()\n        }, ...prev]);\n      }\n    } catch (error) {\n      console.error('Error uploading chunk:', error);\n      setError(`Error processing audio: ${error.message}`);\n    }\n  };\n\n  // Process audio chunks\n  useEffect(() => {\n    const processChunk = async () => {\n      if (audioChunks.length > 0) {\n        const lastChunk = audioChunks[audioChunks.length - 1];\n        if (lastChunk.size > 0) {\n          await uploadChunk(lastChunk);\n        }\n      }\n    };\n\n    processChunk();\n  }, [audioChunks]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <header className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800\">Hindi Audio Transcription Tool</h1>\n          <p className=\"text-gray-600 mt-2\">Record and transcribe Hindi audio in real-time</p>\n        </header>\n\n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n          {/* Device Status Indicator */}\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className={`w-3 h-3 rounded-full mr-2 ${\n              deviceStatus === 'available' ? 'bg-green-500' :\n              deviceStatus === 'unavailable' ? 'bg-red-500' :\n              'bg-yellow-500'\n            }`}></div>\n            <span className=\"text-sm text-gray-600\">\n              {deviceStatus === 'available' ? 'Microphone Ready' :\n               deviceStatus === 'unavailable' ? 'No Microphone' :\n               'Checking Device...'}\n            </span>\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\n              <span className=\"block sm:inline\">{error}</span>\n            </div>\n          )}\n\n          <div className=\"flex justify-center mb-6\">\n            <button\n              onClick={isRecording ? stopRecording : startRecording}\n              disabled={deviceStatus !== 'available'}\n              className={`px-6 py-3 rounded-full font-semibold text-white ${\n                deviceStatus !== 'available' \n                  ? 'bg-gray-400 cursor-not-allowed' \n                : isRecording \n                  ? 'bg-red-500 hover:bg-red-600' \n                  : 'bg-blue-500 hover:bg-blue-600'\n              }`}\n            >\n              {isRecording ? 'Stop Recording' : 'Start Recording'}\n            </button>\n          </div>\n\n          {isRecording && (\n            <div className=\"text-center text-sm text-gray-600\">\n              <div className=\"recording-indicator inline-block w-2 h-2 bg-red-500 rounded-full mr-2\"></div>\n              Recording in progress... Audio will be processed in 8-minute chunks\n            </div>\n          )}\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Transcriptions</h2>\n          <div className=\"space-y-4\">\n            {transcriptions.map((trans, index) => (\n              <div key={index} className=\"border-b pb-4\">\n                <p className=\"text-gray-800\">{trans.text}</p>\n                <div className=\"text-sm text-gray-500 mt-2\">\n                  {new Date(trans.timestamp).toLocaleString()} - Duration: {trans.duration}s\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}