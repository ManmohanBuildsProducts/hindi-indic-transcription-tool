{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [transcriptions, setTranscriptions] = useState([]);\n  const mediaRecorder = useRef(null);\n  const chunkInterval = useRef(null);\n  useEffect(() => {\n    // Load existing transcriptions\n    fetchTranscriptions();\n  }, []);\n  const fetchTranscriptions = async () => {\n    try {\n      const response = await fetch('http://localhost:55285/transcriptions');\n      const data = await response.json();\n      setTranscriptions(data);\n    } catch (error) {\n      console.error('Error fetching transcriptions:', error);\n    }\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorder.current = new MediaRecorder(stream);\n      mediaRecorder.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, event.data]);\n        }\n      };\n      mediaRecorder.current.start();\n      setIsRecording(true);\n\n      // Create 8-minute chunks\n      chunkInterval.current = setInterval(() => {\n        if (mediaRecorder.current && mediaRecorder.current.state === 'recording') {\n          mediaRecorder.current.stop();\n          mediaRecorder.current.start();\n        }\n      }, 8 * 60 * 1000); // 8 minutes in milliseconds\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorder.current) {\n      mediaRecorder.current.stop();\n      clearInterval(chunkInterval.current);\n      mediaRecorder.current.stream.getTracks().forEach(track => track.stop());\n    }\n    setIsRecording(false);\n  };\n  const uploadChunk = async chunk => {\n    const formData = new FormData();\n    formData.append('audio', chunk, 'audio-chunk.webm');\n    try {\n      const response = await fetch('http://localhost:55285/transcribe', {\n        method: 'POST',\n        body: formData\n      });\n      const result = await response.json();\n      setTranscriptions(prev => [result, ...prev]);\n    } catch (error) {\n      console.error('Error uploading chunk:', error);\n    }\n  };\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      uploadChunk(audioChunks[audioChunks.length - 1]);\n    }\n  }, [audioChunks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 p-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-4xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"text-center mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold text-gray-800\",\n          children: \"Hindi Audio Transcription Tool\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mt-2\",\n          children: \"Record and transcribe Hindi audio in real-time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center mb-6\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isRecording ? stopRecording : startRecording,\n            className: `px-6 py-3 rounded-full font-semibold text-white ${isRecording ? 'bg-red-500 hover:bg-red-600' : 'bg-blue-500 hover:bg-blue-600'}`,\n            children: isRecording ? 'Stop Recording' : 'Start Recording'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-sm text-gray-600\",\n          children: \"Recording in progress... Audio will be processed in 8-minute chunks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Transcriptions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: transcriptions.map((trans, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border-b pb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-800\",\n              children: trans.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-500 mt-2\",\n              children: [new Date(trans.timestamp).toLocaleString(), \" - Duration: \", trans.duration, \"s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4KQRCDE33PcZ5kZ7QcDOlfkLVBo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","audioChunks","setAudioChunks","transcriptions","setTranscriptions","mediaRecorder","chunkInterval","fetchTranscriptions","response","fetch","data","json","error","console","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","event","size","chunks","start","setInterval","state","stop","stopRecording","clearInterval","getTracks","forEach","track","uploadChunk","chunk","formData","FormData","append","method","body","result","prev","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","trans","index","text","Date","timestamp","toLocaleString","duration","_c","$RefreshReg$"],"sources":["/app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [transcriptions, setTranscriptions] = useState([]);\n  const mediaRecorder = useRef(null);\n  const chunkInterval = useRef(null);\n\n  useEffect(() => {\n    // Load existing transcriptions\n    fetchTranscriptions();\n  }, []);\n\n  const fetchTranscriptions = async () => {\n    try {\n      const response = await fetch('http://localhost:55285/transcriptions');\n      const data = await response.json();\n      setTranscriptions(data);\n    } catch (error) {\n      console.error('Error fetching transcriptions:', error);\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorder.current = new MediaRecorder(stream);\n      \n      mediaRecorder.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, event.data]);\n        }\n      };\n\n      mediaRecorder.current.start();\n      setIsRecording(true);\n\n      // Create 8-minute chunks\n      chunkInterval.current = setInterval(() => {\n        if (mediaRecorder.current && mediaRecorder.current.state === 'recording') {\n          mediaRecorder.current.stop();\n          mediaRecorder.current.start();\n        }\n      }, 8 * 60 * 1000); // 8 minutes in milliseconds\n\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorder.current) {\n      mediaRecorder.current.stop();\n      clearInterval(chunkInterval.current);\n      mediaRecorder.current.stream.getTracks().forEach(track => track.stop());\n    }\n    setIsRecording(false);\n  };\n\n  const uploadChunk = async (chunk) => {\n    const formData = new FormData();\n    formData.append('audio', chunk, 'audio-chunk.webm');\n\n    try {\n      const response = await fetch('http://localhost:55285/transcribe', {\n        method: 'POST',\n        body: formData,\n      });\n      const result = await response.json();\n      setTranscriptions(prev => [result, ...prev]);\n    } catch (error) {\n      console.error('Error uploading chunk:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      uploadChunk(audioChunks[audioChunks.length - 1]);\n    }\n  }, [audioChunks]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <header className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800\">Hindi Audio Transcription Tool</h1>\n          <p className=\"text-gray-600 mt-2\">Record and transcribe Hindi audio in real-time</p>\n        </header>\n\n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n          <div className=\"flex justify-center mb-6\">\n            <button\n              onClick={isRecording ? stopRecording : startRecording}\n              className={`px-6 py-3 rounded-full font-semibold text-white ${\n                isRecording \n                  ? 'bg-red-500 hover:bg-red-600' \n                  : 'bg-blue-500 hover:bg-blue-600'\n              }`}\n            >\n              {isRecording ? 'Stop Recording' : 'Start Recording'}\n            </button>\n          </div>\n\n          {isRecording && (\n            <div className=\"text-center text-sm text-gray-600\">\n              Recording in progress... Audio will be processed in 8-minute chunks\n            </div>\n          )}\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Transcriptions</h2>\n          <div className=\"space-y-4\">\n            {transcriptions.map((trans, index) => (\n              <div key={index} className=\"border-b pb-4\">\n                <p className=\"text-gray-800\">{trans.text}</p>\n                <div className=\"text-sm text-gray-500 mt-2\">\n                  {new Date(trans.timestamp).toLocaleString()} - Duration: {trans.duration}s\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}