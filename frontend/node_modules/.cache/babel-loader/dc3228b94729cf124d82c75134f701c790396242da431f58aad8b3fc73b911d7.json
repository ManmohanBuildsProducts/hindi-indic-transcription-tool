{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [transcriptions, setTranscriptions] = useState([]);\n  const [error, setError] = useState(null);\n  const [deviceStatus, setDeviceStatus] = useState('unchecked'); // 'unchecked' | 'available' | 'unavailable'\n  const [isTestMode, setIsTestMode] = useState(false);\n  const mediaRecorder = useRef(null);\n  const chunkInterval = useRef(null);\n\n  // Test mode toggle\n  const toggleTestMode = () => {\n    setIsTestMode(!isTestMode);\n    setDeviceStatus(isTestMode ? 'unchecked' : 'available');\n    setError(null);\n  };\n  useEffect(() => {\n    // Load existing transcriptions\n    fetchTranscriptions();\n\n    // Check for audio device availability\n    checkAudioDevice();\n  }, []);\n  const checkAudioDevice = async () => {\n    try {\n      // First request permission\n      await navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        // Stop the stream immediately\n        stream.getTracks().forEach(track => track.stop());\n        setDeviceStatus('available');\n        setError(null);\n      }).catch(err => {\n        console.error('Permission error:', err);\n        setDeviceStatus('unavailable');\n        setError('Microphone permission denied. Please allow microphone access.');\n        return false;\n      });\n\n      // Then check available devices\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const hasAudioDevice = devices.some(device => device.kind === 'audioinput');\n      if (!hasAudioDevice) {\n        setDeviceStatus('unavailable');\n        setError('No audio input device found. Please connect a microphone.');\n        return false;\n      }\n      return true;\n    } catch (err) {\n      console.error('Device check error:', err);\n      setDeviceStatus('unavailable');\n      setError('Could not access audio devices. Please check permissions.');\n      return false;\n    }\n  };\n  const fetchTranscriptions = async () => {\n    try {\n      const response = await fetch('http://localhost:55285/transcriptions');\n      const data = await response.json();\n      setTranscriptions(data);\n    } catch (error) {\n      console.error('Error fetching transcriptions:', error);\n    }\n  };\n  const startRecording = async () => {\n    try {\n      setError(null);\n      if (isTestMode) {\n        // Simulate recording in test mode\n        setIsRecording(true);\n\n        // Simulate chunks every 8 minutes\n        chunkInterval.current = setInterval(() => {\n          const testAudioBlob = new Blob(['Test audio data'], {\n            type: 'audio/webm'\n          });\n          setAudioChunks(chunks => [...chunks, testAudioBlob]);\n        }, 8 * 60 * 1000); // 8 minutes\n\n        // Simulate first chunk immediately\n        const initialTestBlob = new Blob(['Initial test audio data'], {\n          type: 'audio/webm'\n        });\n        setAudioChunks(chunks => [...chunks, initialTestBlob]);\n        return;\n      }\n\n      // Normal recording mode\n      if (deviceStatus !== 'available') {\n        const deviceAvailable = await checkAudioDevice();\n        if (!deviceAvailable) {\n          throw new Error('Audio device not available');\n        }\n      }\n\n      // Get audio stream with specific constraints\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: {\n            ideal: 16000\n          },\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n\n      // Find supported MIME type\n      const mimeTypes = ['audio/webm', 'audio/webm;codecs=opus', 'audio/wav'];\n      const selectedMimeType = mimeTypes.find(type => MediaRecorder.isTypeSupported(type));\n      if (!selectedMimeType) {\n        throw new Error('No supported audio format found. Please use a modern browser.');\n      }\n\n      // Create MediaRecorder with optimal settings\n      mediaRecorder.current = new MediaRecorder(stream, {\n        mimeType: selectedMimeType,\n        audioBitsPerSecond: 32000 // 32kbps for good quality speech\n      });\n      mediaRecorder.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, event.data]);\n        }\n      };\n      mediaRecorder.current.onerror = event => {\n        setError('Recording error: ' + event.error.message);\n        stopRecording();\n      };\n      mediaRecorder.current.start(1000); // Capture every second for smoother experience\n      setIsRecording(true);\n\n      // Create 8-minute chunks\n      chunkInterval.current = setInterval(() => {\n        if (mediaRecorder.current && mediaRecorder.current.state === 'recording') {\n          mediaRecorder.current.stop();\n          mediaRecorder.current.start(1000);\n        }\n      }, 8 * 60 * 1000); // 8 minutes in milliseconds\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      setError(error.message || 'Error accessing microphone');\n      setIsRecording(false);\n    }\n  };\n  const stopRecording = () => {\n    if (isTestMode) {\n      clearInterval(chunkInterval.current);\n      setIsRecording(false);\n      return;\n    }\n    if (mediaRecorder.current) {\n      mediaRecorder.current.stop();\n      clearInterval(chunkInterval.current);\n      mediaRecorder.current.stream.getTracks().forEach(track => track.stop());\n    }\n    setIsRecording(false);\n  };\n  const uploadChunk = async chunk => {\n    try {\n      // Create a unique filename with timestamp\n      const timestamp = new Date().getTime();\n      const extension = chunk.type.includes('webm') ? 'webm' : 'wav';\n      const filename = `audio-chunk-${timestamp}.${extension}`;\n\n      // Check file size before uploading\n      if (chunk.size > 10 * 1024 * 1024) {\n        // 10MB limit\n        throw new Error('Audio chunk too large. Maximum size is 10MB.');\n      }\n      const formData = new FormData();\n      formData.append('audio', chunk, filename);\n      const response = await fetch('http://localhost:55285/transcribe', {\n        method: 'POST',\n        body: formData\n      });\n      let errorData;\n      try {\n        errorData = await response.json();\n      } catch (e) {\n        errorData = {\n          detail: 'Failed to parse server response'\n        };\n      }\n      if (!response.ok) {\n        throw new Error(errorData.detail || `Server error: ${response.status}`);\n      }\n\n      // Handle successful response\n      if (errorData.text && errorData.text.trim()) {\n        if (errorData.text.startsWith('Error') || errorData.text.startsWith('No speech')) {\n          console.warn('Transcription issue:', errorData.text);\n          return;\n        }\n\n        // Update transcriptions with new entry\n        setTranscriptions(prev => [{\n          ...errorData,\n          timestamp: new Date(errorData.timestamp).toISOString(),\n          filename: filename\n        }, ...prev]);\n\n        // Clear error if successful\n        setError(null);\n      }\n    } catch (error) {\n      console.error('Error uploading chunk:', error);\n\n      // Handle specific error cases\n      let errorMessage = error.message;\n      if (errorMessage.includes('too large')) {\n        errorMessage = 'Recording chunk too large. Please use shorter recordings.';\n      } else if (errorMessage.includes('format')) {\n        errorMessage = 'Unsupported audio format. Please use a different browser.';\n      } else if (errorMessage.includes('API')) {\n        errorMessage = 'Transcription service error. Please try again later.';\n      }\n      setError(errorMessage);\n      return null;\n    }\n  };\n\n  // Process audio chunks\n  useEffect(() => {\n    const processChunk = async () => {\n      if (audioChunks.length > 0) {\n        const lastChunk = audioChunks[audioChunks.length - 1];\n        if (lastChunk.size > 0) {\n          await uploadChunk(lastChunk);\n        }\n      }\n    };\n    processChunk();\n  }, [audioChunks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 p-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-4xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"text-center mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold text-gray-800\",\n          children: \"Hindi Audio Transcription Tool\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 mt-2\",\n          children: \"Record and transcribe Hindi audio in real-time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleTestMode,\n            className: \"text-sm px-4 py-2 rounded bg-gray-200 hover:bg-gray-300 transition-colors\",\n            children: isTestMode ? 'Exit Test Mode' : 'Enter Test Mode'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), isTestMode && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500 mt-2\",\n            children: \"Test mode enabled. Recording simulation active.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-3 h-3 rounded-full mr-2 ${isTestMode ? 'bg-yellow-500' : deviceStatus === 'available' ? 'bg-green-500' : deviceStatus === 'unavailable' ? 'bg-red-500' : 'bg-yellow-500'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: isTestMode ? 'Test Mode Active' : deviceStatus === 'available' ? 'Microphone Ready' : deviceStatus === 'unavailable' ? 'No Microphone' : 'Checking Device...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), error && !isTestMode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block sm:inline\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center mb-6\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isRecording ? stopRecording : startRecording,\n            disabled: !isTestMode && deviceStatus !== 'available',\n            className: `px-6 py-3 rounded-full font-semibold text-white ${!isTestMode && deviceStatus !== 'available' ? 'bg-gray-400 cursor-not-allowed' : isRecording ? 'bg-red-500 hover:bg-red-600' : 'bg-blue-500 hover:bg-blue-600'}`,\n            children: isRecording ? 'Stop Recording' : 'Start Recording'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-sm text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"recording-indicator inline-block w-2 h-2 bg-red-500 rounded-full mr-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this), isTestMode ? 'Test recording in progress...' : 'Recording in progress... Audio will be processed in 8-minute chunks']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Transcriptions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: transcriptions.map((trans, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border-b pb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-800\",\n              children: trans.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-500 mt-2\",\n              children: [new Date(trans.timestamp).toLocaleString(), \" - Duration: \", trans.duration, \"s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TySpamViiV9XdXGEJI9Ef214oZA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","audioChunks","setAudioChunks","transcriptions","setTranscriptions","error","setError","deviceStatus","setDeviceStatus","isTestMode","setIsTestMode","mediaRecorder","chunkInterval","toggleTestMode","fetchTranscriptions","checkAudioDevice","navigator","mediaDevices","getUserMedia","audio","then","stream","getTracks","forEach","track","stop","catch","err","console","devices","enumerateDevices","hasAudioDevice","some","device","kind","response","fetch","data","json","startRecording","current","setInterval","testAudioBlob","Blob","type","chunks","initialTestBlob","deviceAvailable","Error","channelCount","sampleRate","ideal","echoCancellation","noiseSuppression","autoGainControl","mimeTypes","selectedMimeType","find","MediaRecorder","isTypeSupported","mimeType","audioBitsPerSecond","ondataavailable","event","size","onerror","message","stopRecording","start","state","clearInterval","uploadChunk","chunk","timestamp","Date","getTime","extension","includes","filename","formData","FormData","append","method","body","errorData","e","detail","ok","status","text","trim","startsWith","warn","prev","toISOString","errorMessage","processChunk","length","lastChunk","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","trans","index","toLocaleString","duration","_c","$RefreshReg$"],"sources":["/app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [transcriptions, setTranscriptions] = useState([]);\n  const [error, setError] = useState(null);\n  const [deviceStatus, setDeviceStatus] = useState('unchecked'); // 'unchecked' | 'available' | 'unavailable'\n  const [isTestMode, setIsTestMode] = useState(false);\n  const mediaRecorder = useRef(null);\n  const chunkInterval = useRef(null);\n  \n  // Test mode toggle\n  const toggleTestMode = () => {\n    setIsTestMode(!isTestMode);\n    setDeviceStatus(isTestMode ? 'unchecked' : 'available');\n    setError(null);\n  };\n\n  useEffect(() => {\n    // Load existing transcriptions\n    fetchTranscriptions();\n    \n    // Check for audio device availability\n    checkAudioDevice();\n  }, []);\n\n  const checkAudioDevice = async () => {\n    try {\n      // First request permission\n      await navigator.mediaDevices.getUserMedia({ audio: true })\n        .then(stream => {\n          // Stop the stream immediately\n          stream.getTracks().forEach(track => track.stop());\n          setDeviceStatus('available');\n          setError(null);\n        })\n        .catch(err => {\n          console.error('Permission error:', err);\n          setDeviceStatus('unavailable');\n          setError('Microphone permission denied. Please allow microphone access.');\n          return false;\n        });\n\n      // Then check available devices\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const hasAudioDevice = devices.some(device => device.kind === 'audioinput');\n      \n      if (!hasAudioDevice) {\n        setDeviceStatus('unavailable');\n        setError('No audio input device found. Please connect a microphone.');\n        return false;\n      }\n\n      return true;\n    } catch (err) {\n      console.error('Device check error:', err);\n      setDeviceStatus('unavailable');\n      setError('Could not access audio devices. Please check permissions.');\n      return false;\n    }\n  };\n\n  const fetchTranscriptions = async () => {\n    try {\n      const response = await fetch('http://localhost:55285/transcriptions');\n      const data = await response.json();\n      setTranscriptions(data);\n    } catch (error) {\n      console.error('Error fetching transcriptions:', error);\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      setError(null);\n      \n      if (isTestMode) {\n        // Simulate recording in test mode\n        setIsRecording(true);\n        \n        // Simulate chunks every 8 minutes\n        chunkInterval.current = setInterval(() => {\n          const testAudioBlob = new Blob(['Test audio data'], { type: 'audio/webm' });\n          setAudioChunks(chunks => [...chunks, testAudioBlob]);\n        }, 8 * 60 * 1000); // 8 minutes\n        \n        // Simulate first chunk immediately\n        const initialTestBlob = new Blob(['Initial test audio data'], { type: 'audio/webm' });\n        setAudioChunks(chunks => [...chunks, initialTestBlob]);\n        \n        return;\n      }\n      \n      // Normal recording mode\n      if (deviceStatus !== 'available') {\n        const deviceAvailable = await checkAudioDevice();\n        if (!deviceAvailable) {\n          throw new Error('Audio device not available');\n        }\n      }\n\n      // Get audio stream with specific constraints\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: { ideal: 16000 },\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n      \n      // Find supported MIME type\n      const mimeTypes = [\n        'audio/webm',\n        'audio/webm;codecs=opus',\n        'audio/wav'\n      ];\n      \n      const selectedMimeType = mimeTypes.find(type => MediaRecorder.isTypeSupported(type));\n      \n      if (!selectedMimeType) {\n        throw new Error('No supported audio format found. Please use a modern browser.');\n      }\n      \n      // Create MediaRecorder with optimal settings\n      mediaRecorder.current = new MediaRecorder(stream, {\n        mimeType: selectedMimeType,\n        audioBitsPerSecond: 32000 // 32kbps for good quality speech\n      });\n      \n      mediaRecorder.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          setAudioChunks(chunks => [...chunks, event.data]);\n        }\n      };\n\n      mediaRecorder.current.onerror = (event) => {\n        setError('Recording error: ' + event.error.message);\n        stopRecording();\n      };\n\n      mediaRecorder.current.start(1000); // Capture every second for smoother experience\n      setIsRecording(true);\n\n      // Create 8-minute chunks\n      chunkInterval.current = setInterval(() => {\n        if (mediaRecorder.current && mediaRecorder.current.state === 'recording') {\n          mediaRecorder.current.stop();\n          mediaRecorder.current.start(1000);\n        }\n      }, 8 * 60 * 1000); // 8 minutes in milliseconds\n\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      setError(error.message || 'Error accessing microphone');\n      setIsRecording(false);\n    }\n  };\n\n  const stopRecording = () => {\n    if (isTestMode) {\n      clearInterval(chunkInterval.current);\n      setIsRecording(false);\n      return;\n    }\n    \n    if (mediaRecorder.current) {\n      mediaRecorder.current.stop();\n      clearInterval(chunkInterval.current);\n      mediaRecorder.current.stream.getTracks().forEach(track => track.stop());\n    }\n    setIsRecording(false);\n  };\n\n  const uploadChunk = async (chunk) => {\n    try {\n      // Create a unique filename with timestamp\n      const timestamp = new Date().getTime();\n      const extension = chunk.type.includes('webm') ? 'webm' : 'wav';\n      const filename = `audio-chunk-${timestamp}.${extension}`;\n      \n      // Check file size before uploading\n      if (chunk.size > 10 * 1024 * 1024) { // 10MB limit\n        throw new Error('Audio chunk too large. Maximum size is 10MB.');\n      }\n      \n      const formData = new FormData();\n      formData.append('audio', chunk, filename);\n\n      const response = await fetch('http://localhost:55285/transcribe', {\n        method: 'POST',\n        body: formData,\n      });\n\n      let errorData;\n      try {\n        errorData = await response.json();\n      } catch (e) {\n        errorData = { detail: 'Failed to parse server response' };\n      }\n\n      if (!response.ok) {\n        throw new Error(errorData.detail || `Server error: ${response.status}`);\n      }\n\n      // Handle successful response\n      if (errorData.text && errorData.text.trim()) {\n        if (errorData.text.startsWith('Error') || errorData.text.startsWith('No speech')) {\n          console.warn('Transcription issue:', errorData.text);\n          return;\n        }\n\n        // Update transcriptions with new entry\n        setTranscriptions(prev => [{\n          ...errorData,\n          timestamp: new Date(errorData.timestamp).toISOString(),\n          filename: filename\n        }, ...prev]);\n\n        // Clear error if successful\n        setError(null);\n      }\n    } catch (error) {\n      console.error('Error uploading chunk:', error);\n      \n      // Handle specific error cases\n      let errorMessage = error.message;\n      if (errorMessage.includes('too large')) {\n        errorMessage = 'Recording chunk too large. Please use shorter recordings.';\n      } else if (errorMessage.includes('format')) {\n        errorMessage = 'Unsupported audio format. Please use a different browser.';\n      } else if (errorMessage.includes('API')) {\n        errorMessage = 'Transcription service error. Please try again later.';\n      }\n      \n      setError(errorMessage);\n      return null;\n    }\n  };\n\n  // Process audio chunks\n  useEffect(() => {\n    const processChunk = async () => {\n      if (audioChunks.length > 0) {\n        const lastChunk = audioChunks[audioChunks.length - 1];\n        if (lastChunk.size > 0) {\n          await uploadChunk(lastChunk);\n        }\n      }\n    };\n\n    processChunk();\n  }, [audioChunks]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <header className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800\">Hindi Audio Transcription Tool</h1>\n          <p className=\"text-gray-600 mt-2\">Record and transcribe Hindi audio in real-time</p>\n          \n          {/* Test Mode Toggle */}\n          <div className=\"mt-4\">\n            <button\n              onClick={toggleTestMode}\n              className=\"text-sm px-4 py-2 rounded bg-gray-200 hover:bg-gray-300 transition-colors\"\n            >\n              {isTestMode ? 'Exit Test Mode' : 'Enter Test Mode'}\n            </button>\n            {isTestMode && (\n              <p className=\"text-xs text-gray-500 mt-2\">\n                Test mode enabled. Recording simulation active.\n              </p>\n            )}\n          </div>\n        </header>\n\n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-8\">\n          {/* Device Status Indicator */}\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className={`w-3 h-3 rounded-full mr-2 ${\n              isTestMode ? 'bg-yellow-500' :\n              deviceStatus === 'available' ? 'bg-green-500' :\n              deviceStatus === 'unavailable' ? 'bg-red-500' :\n              'bg-yellow-500'\n            }`}></div>\n            <span className=\"text-sm text-gray-600\">\n              {isTestMode ? 'Test Mode Active' :\n               deviceStatus === 'available' ? 'Microphone Ready' :\n               deviceStatus === 'unavailable' ? 'No Microphone' :\n               'Checking Device...'}\n            </span>\n          </div>\n\n          {/* Error Message */}\n          {error && !isTestMode && (\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\n              <span className=\"block sm:inline\">{error}</span>\n            </div>\n          )}\n\n          <div className=\"flex justify-center mb-6\">\n            <button\n              onClick={isRecording ? stopRecording : startRecording}\n              disabled={!isTestMode && deviceStatus !== 'available'}\n              className={`px-6 py-3 rounded-full font-semibold text-white ${\n                !isTestMode && deviceStatus !== 'available'\n                  ? 'bg-gray-400 cursor-not-allowed' \n                : isRecording \n                  ? 'bg-red-500 hover:bg-red-600' \n                  : 'bg-blue-500 hover:bg-blue-600'\n              }`}\n            >\n              {isRecording ? 'Stop Recording' : 'Start Recording'}\n            </button>\n          </div>\n\n          {isRecording && (\n            <div className=\"text-center text-sm text-gray-600\">\n              <div className=\"recording-indicator inline-block w-2 h-2 bg-red-500 rounded-full mr-2\"></div>\n              {isTestMode ? 'Test recording in progress...' : 'Recording in progress... Audio will be processed in 8-minute chunks'}\n            </div>\n          )}\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Transcriptions</h2>\n          <div className=\"space-y-4\">\n            {transcriptions.map((trans, index) => (\n              <div key={index} className=\"border-b pb-4\">\n                <p className=\"text-gray-800\">{trans.text}</p>\n                <div className=\"text-sm text-gray-500 mt-2\">\n                  {new Date(trans.timestamp).toLocaleString()} - Duration: {trans.duration}s\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}